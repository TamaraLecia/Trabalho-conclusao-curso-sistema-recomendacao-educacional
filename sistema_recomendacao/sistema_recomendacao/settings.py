"""
Django settings for sistema_recomendacao project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
# Importações para ler a chave da api do youtube
import json
import os
# importação nativa do django
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5v4+ok(w=!)h$bzmm4l56z^&6ce19aao_s5o%qw&ev)(x%3dxp'

CONFIGURACAO_PATH = BASE_DIR.parent / "configuracaoAdicional" / "youtube.json"

print("DEBUG - Procurando arquivo em:", CONFIGURACAO_PATH)


if CONFIGURACAO_PATH.exists():
    with open(CONFIGURACAO_PATH) as configura:
        config = json.load(configura)
        YOUTUBE_API_KEY = config.get("YOUTUBE_API_KEY")
else:
    YOUTUBE_API_KEY = None

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# utilização no deploy para aceitar requisições todos os domínios
ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # autenticação com o django allauth
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # providers
    'allauth.socialaccount.providers.google',

    # Meus apps
    'recomendarTrilhas',
    'Sistema',
    'administrador',
    'usuarioComun',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

     # Add the account middleware:
    'allauth.account.middleware.AccountMiddleware',
    # adicionado para fazer o deploy no railway
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

# Provider specific settings


SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
    }
}


# Django allauth config
SITE_ID = 1
ACCOUNT_EMAIL_VERIFICATION = 'none'
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
SOCIALACCOUNT_ADAPTER = 'Sistema.adapters.CustomSocialAccountAdapter'
SOCIALACCOUNT_AUTO_SIGNUP = True


# redireciona automaticamente para o Google
# SOCIALACCOUNT_LOGIN_ON_GET = True

ROOT_URLCONF = 'sistema_recomendacao.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/''],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sistema_recomendacao.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        # eu acrescentei o os.path.join no name
        'NAME': os.path.join(BASE_DIR / 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#Meu backend de autenticação com email
AUTHENTICATION_BACKENDS = [
    'Sistema.backends.EmailOrUsernameBackend',
    # mantenha o padrão como fallback
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
# adicione para fazer deploy no railway
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [BASE_DIR / "static"]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/accounts/profile/'

LOGIN_URL = '/accounts/login/'
# LOGIN_REDIRECT_URL = '/usuarioComun/indexUsuarioComun'
# LOGIN_REDIRECT_URL = '/administrador/indexAdm'
# LOGIN_REDIRECT_URL = '/Sistema/indexSistema'
# LOGIN_REDIRECT_URL = '/accounts/login/'